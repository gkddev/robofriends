{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","Searchfield","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"mOAgBgBA,EAfH,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,KAAKC,EAAa,EAAbA,MAAMC,EAAO,EAAPA,GAErB,OACI,yBAAKA,GAAG,OAAOC,UAAU,uDAErB,yBAAKC,IAAI,eAAeC,IAAG,+BAA0BH,KACrD,6BACI,4BACKF,GAEL,2BAAIC,MCANK,EARC,SAAC,GAAY,IAAXC,EAAU,EAAVA,OAEd,OACIA,EAAOC,KAAI,SAACC,EAAMC,GACd,OAAS,kBAAC,EAAD,CAAMC,IAAKD,EAAGR,GAAIK,EAAOG,GAAGR,GAAIF,KAAMO,EAAOG,GAAGV,KAAMC,MAAOM,EAAOG,GAAGT,YCG7EW,EARG,SAAC,GAA8B,EAA7BC,YAA8B,IAAlBC,EAAiB,EAAjBA,aAC3B,OACI,yBAAKX,UAAU,WAEhB,2BAAOA,UAAU,mCAAmCY,KAAK,SAASC,YAAY,gBAAgBC,SAAUH,MCGjGI,EAPD,SAACC,GACX,OACI,yBAAKC,MAAO,CAACC,UAAU,SAASC,OAAO,kBAAkBC,OAAO,UAC3DJ,EAAMK,WCiBJC,G,kBApBV,WAAYN,GACX,IAAD,8BACI,4CAAMA,KACDO,MAAM,CACPC,UAAS,GAHjB,E,+EAOkBC,EAAMC,GAE7BC,KAAKC,SAAS,CAACJ,UAAS,M,+BAGnB,OAAGG,KAAKJ,MAAMC,SAEH,sDAEJG,KAAKX,MAAMK,a,GAlBKQ,cCoDZC,E,YA5CX,aAAc,IAAD,8BACT,+CAeJC,eAAiB,SAACC,GAEf,EAAKJ,SAAS,CAACK,YAAYD,EAAME,OAAOC,SAhBvC,EAAKZ,MAAM,CACRnB,OAAO,GACP6B,YAAY,IAJN,E,iFAQZ,IAAD,OACIG,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAGA,EAASC,UACtBF,MAAK,SAAAG,GAAK,OAAE,EAAKZ,SAAS,CAACxB,OAAOoC,S,+BAWjC,IAAD,EACuBb,KAAKJ,MAAzBnB,EADH,EACGA,OAAO6B,EADV,EACUA,YACTQ,EAAerC,EAAOsC,QAAO,SAAAC,GAC/B,OAAOA,EAAM9C,KAAK+C,cAAcC,SAASZ,EAAYW,kBAEzD,OAAQxC,EAAO0C,OAGX,yBAAK9C,UAAU,MACX,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWW,aAAcgB,KAAKI,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACO,kBAAC,EAAD,CAAU3B,OAAQqC,OAPpC,2C,GA7BSM,IAAMlB,W,YCIJmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCLNC,IAASC,OAAO,kBAAC,EAAD,MAAQC,SAASC,eAAe,SDsH1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMtB,MAAK,SAAAuB,GACjCA,EAAaC,iB","file":"static/js/main.3033003d.chunk.js","sourcesContent":["import React from 'react';\r\n const Card =({name,email,id}) =>{\r\n    //  const {name,email,id}=props;\r\n     return(\r\n         <div id='root' className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n             {/* <h1>RoboFriends</h1> */} \r\n             <img alt='just a thing' src={`https://robohash.org/${id}`} />\r\n             <div>\r\n                 <h2>\r\n                     {name}\r\n                 </h2>\r\n                 <p>{email}</p>\r\n             </div>\r\n         </div>\r\n     );\r\n }\r\n export default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n// import {robots} from './robots';\r\nconst CardList =({robots})=>{\r\n  \r\n    return(\r\n        robots.map((user ,i )=>{\r\n            return ( <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email}/>);\r\n            })\r\n    );\r\n}\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield,searchChange}) =>{\r\n     return (\r\n         <div className='pa2 mr2'>\r\n\r\n        <input className='pa3 ba b--green bg-lightest-blue' type='search' placeholder='Search Robots' onChange={searchChange} />\r\n        </div>\r\n     );\r\n}\r\nexport default SearchBox;\r\n","import React from 'react';\r\n\r\nconst Scroll =(props) =>{\r\n    return (\r\n        <div style={{overflowY:'scroll',border:'5px solid black',height:'800px'}}>\r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\nexport default Scroll;","import React ,{Component} from 'react';\r\n class ErrorBoundry extends Component{\r\n     constructor(props)\r\n     {\r\n         super(props);\r\n         this.state={\r\n             hasError:false\r\n         }\r\n     }\r\n     \r\n     componentDidCatch(error,info)\r\n     {\r\nthis.setState({hasError:true})\r\n     }\r\n render(){\r\n     if(this.state.hasError)\r\n     {\r\n         return <h1>ooops,That is not good</h1>\r\n     }\r\n     return this.props.children\r\n}\r\n}\r\nexport default ErrorBoundry","import React from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\n// import {robots} from './robots';\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\n\r\nclass App extends React.Component{\r\n     constructor(){\r\n         super()\r\n         this.state={\r\n            robots:[],\r\n            Searchfield:''\r\n         }\r\n     }\r\n     componentDidMount()\r\n     {\r\n         fetch('https://jsonplaceholder.typicode.com/users')\r\n         .then(response=> response.json())\r\n            .then(users=>this.setState({robots:users}));\r\n\r\n        \r\n        \r\n     }\r\n     onSearchChange = (event)=>\r\n     {\r\n        this.setState({Searchfield:event.target.value})\r\n        \r\n     \r\n     }\r\n     render(){\r\n         const {robots,Searchfield}=this.state;\r\n        const filteredRobots=robots.filter(robot=>{\r\n            return robot.name.toLowerCase().includes(Searchfield.toLowerCase());\r\n        })\r\n        return !robots.length?\r\n         <h1>Loading</h1>:\r\n    (\r\n            <div className='tc'>\r\n                <h1 className='tc'>Robofriends</h1>\r\n                <SearchBox searchChange={this.onSearchChange}/>\r\n                <Scroll >\r\n                    <ErrorBoundry>            \r\n                           <CardList robots={filteredRobots} />\r\n                    </ErrorBoundry>\r\n\r\n       </Scroll>\r\n            </div>\r\n             );\r\n      \r\n            }\r\n }\r\n export default App; ","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './containers/App';\nimport './index.css';\n// import Card from './Card';\n// import CardList from './CardList';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\n// import {robots} from './robots';\n\n// ReactDOM.render(<div><Card id={robots[0].id} name={robots[0].name} email={robots[0].email}/>\n//         <Card id={robots[1].id} name={robots[1].name} email={robots[1].email}/>\n//         <Card id={robots[2].id} name={robots[2].name} email={robots[2].email}/></div>,document.getElementById('root'));\nReactDOM.render(<App />,document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}